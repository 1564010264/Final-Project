pred = sweep(fulltestdata, MARGIN=2, coefi, `*`)
pred = rowSums(pred)
mean((pred- test.Y)^2)
#decision tree
library(tree)
tree.data = tree(CO2_Emissions~ Engine_Size + Cylinders+Fuel_Type+Consumption_City+Consumption_Hwy+Consumption_Comb1, data=data, subset=train)
summary(tree.data)
plot(tree.data)
text(tree.data)
yhat = predict(tree.data, newdata=data[-train,c(4,5,7,8,9,10)])
test.Y= data$CO2_Emissions[-train]
plot(yhat, test.Y)
mean((yhat - test.Y)^2)
plot(tree.data)
text(tree.data)
plot(data)
plot(data$Cylinders,data$CO2_Emissions)
plot(data$Fuel_Type,data$CO2_Emissions)
plot(data$,data$CO2_Emissions)
plot(data$Consumption_Comb1,data$CO2_Emissions)
plot(data$Cylinders,data$CO2_Emissions)
plot(data$Consumption_Comb1,data$CO2_Emissions)
plot(data$Fuel_Type,data$CO2_Emissions)
plot(data$Cylinders,data$CO2_Emissions)
barplot(table(data$Make), cex.names = 1, las=2 )
yhat = predict(tree.data, newdata=data[-train,c(4,5,7,8,9,10)])
test.Y= data$CO2_Emissions[-train]
plot(yhat, test.Y)
mean((yhat - test.Y)^2)
sqrt(mean((yhat - test.Y)^2))
#prune tree
cv.data = cv.tree(tree.data)
tree.data = tree(CO2_Emissions~ Engine_Size + Cylinders+Fuel_Type+Consumption_City+Consumption_Hwy+Consumption_Comb1, data=data, subset=train)
summary(tree.data)
plot(tree.data)
text(tree.data)
yhat = predict(tree.data, newdata=data[-train,c(4,5,7,8,9,10)])
test.Y= data$CO2_Emissions[-train]
plot(yhat, test.Y)
mean((yhat - test.Y)^2)
sqrt(mean((yhat - test.Y)^2))
#prune tree
cv.data = cv.tree(tree.data)
names(cv.data)
summary(cv.data)
plot(cv.data$size, cv.data$dev, type='b')
library(leaps)
library(ggplot2)
p <- ggplot(data = data,
mapping = aes(y = CO2_Emissions, x=reorder(Make,CO2_Emissions,na.rm = TRUE)))
p + geom_boxplot() + coord_flip()
library(leaps)
library(ggplot2)
p <- ggplot(data = data,
mapping = aes(y = CO2_Emissions, x=reorder(Make,CO2_Emissions,na.rm = TRUE)))
p + geom_boxplot() + coord_flip()
fileUrl <- "https://www.nrcan.gc.ca/sites/nrcan/files/oee/files/csv/MY2021%20Fuel%20Consumption%20Ratings.csv"
library(leaps)
library(ggplot2)
fileUrl <- "https://www.nrcan.gc.ca/sites/nrcan/files/oee/files/csv/MY2021%20Fuel%20Consumption%20Ratings.csv"
download.file(fileUrl, destfile = "project.csv")
CO2data = read.csv(file = 'project.csv')
sum(is.na(data)) ## check missing values
data = CO2data[c(2:936),c(2:15)]
colnames(data) <- c('Make','Model','Vehicle_Class','Engine_Size','Cylinders','Transmission','Fuel_Type','Consumption_City','Consumption_Hwy', 'Consumption_Comb1', 'Consumption_Comb2', 'CO2_Emissions','CO2_Rating','Smog_Rating')
summary(data)
head(data)
sapply(data,class)
data$Engine_Size=as.numeric(as.character(data$Engine_Size))
data$Cylinders=as.numeric(as.character(data$Cylinders))
data$Consumption_City<- as.numeric(as.character(data$Consumption_City))
data$Consumption_Hwy <- as.numeric(as.character(data$Consumption_Hwy))
data$Consumption_Comb1 <- as.numeric(as.character(data$Consumption_Comb1))
data$Consumption_Comb2 <- as.numeric(as.character(data$Consumption_Comb2))
data$CO2_Emissions <- as.numeric(as.character(data$CO2_Emissions))
data$CO2_Rating <- as.numeric(as.character(data$CO2_Rating))
data$Smog_Rating <- as.numeric(as.character(data$Smog_Rating))
data$Fuel_Type[data$Fuel_Type== "Z"] <- 91
data$Fuel_Type[data$Fuel_Type== "X"] <- 87
data$Fuel_Type[data$Fuel_Type== "D"] <- 47.5
data$Fuel_Type[data$Fuel_Type== "E"] <- 113
data$Fuel_Type <- as.numeric(as.character(data$Fuel_Type))
sapply(data,class)
summary(data)
dim(data)
names(data)
barplot(table(data$Make), cex.names = 1, las=2 )
par(mar=c(15,2,1,1))
barplot(table(data$Vehicle_Class), cex.names =1.2, las=2 )
hist(data$Engine_Size)
hist(data$Cylinders)
hist(data$Fuel_Type)
hist(data$Consumption_City)
hist(data$Consumption_Hwy)
hist(data$Consumption_Comb1)
hist(data$CO2_Emissions)
plot(data$Cylinders,data$CO2_Emissions)
plot(data$Fuel_Type,data$CO2_Emissions)
plot(data$Consumption_Comb1,data$CO2_Emissions)
# split test data and training data 600/335
p <- ggplot(data = data,
mapping = aes(y = CO2_Emissions, x=reorder(Make,CO2_Emissions,na.rm = TRUE)))
p + geom_boxplot() + coord_flip()
# generarte random number
set.seed(1)
train = sample(1:935,600)
traindata = data[train,c(4,5,7,8,9,10,12)]
testdata = data[-train,c(4,5,7,8,9,10,12)]
train.X = data[train,c(4,5,7,8,9,10)]
train.Y = data[train,12]
test.X = data[-train,c(4,5,7,8,9,10)]
test.Y = data[-train,12]
#Linear regression
lm.full=lm(CO2_Emissions~ Engine_Size + Cylinders+Fuel_Type+Consumption_City+Consumption_Hwy+Consumption_Comb1, data=data, subset=train)
summary(lm.full)
mean((predict(lm.full,data[-train,])- test.Y)^2)
mse.lm = (predict(lm.full,data[-train,])- test.Y)^2
regfit.full=regsubsets(CO2_Emissions~ Engine_Size + Cylinders+Fuel_Type+Consumption_City+Consumption_Hwy+Consumption_Comb1, data=data,subset=train)
reg.summary = summary(regfit.full)
summary(regfit.full)
reg.summary$adjr2
which.max(reg.summary$adjr2)
plot(c(1,2,3,4,5,6),reg.summary$adjr2,)
coef(regfit.full,which.max(reg.summary$adjr2))
coefi = coef(regfit.full,which.max(reg.summary$adjr2))
testones= t(t(rep(1,dim(testdata)[1])))
fulltestdata = cbind(testones,testdata[,c("Cylinders","Fuel_Type","Consumption_City","Consumption_Comb1")])
pred = sweep(fulltestdata, MARGIN=2, coefi, `*`)
pred = rowSums(pred)
mean((pred- test.Y)^2)
#decision tree
library(tree)
tree.data = tree(CO2_Emissions~ Engine_Size + Cylinders+Fuel_Type+Consumption_City+Consumption_Hwy+Consumption_Comb1, data=data, subset=train)
summary(tree.data)
plot(tree.data)
text(tree.data)
yhat = predict(tree.data, newdata=data[-train,c(4,5,7,8,9,10)])
test.Y= data$CO2_Emissions[-train]
plot(yhat, test.Y)
mean((yhat - test.Y)^2)
sqrt(mean((yhat - test.Y)^2))
#prune tree
cv.data = cv.tree(tree.data)
names(cv.data)
summary(cv.data)
plot(cv.data$size, cv.data$dev, type='b')
cv.data$size
cv.data$dev
prune.data = prune.tree(tree.data, best=8)
plot(prune.data)
text(prune.data)
yhat = predict(prune.data, newdata=data[-train,c(4,5,7,8,9,10)])
mean((yhat - test.Y)^2)
sqrt(mean((yhat - test.Y)^2))
install.packages("FNN")
library(FNN)
?knn.reg
knn.pred.k1=knn.reg(train.X,test.X,train.Y,k=1)
knn.pred.k3=knn.reg(train.X,test.X,train.Y,k=3)
knn.pred.k5=knn.reg(train.X,test.X,train.Y,k=5)
knn.pred.k7=knn.reg(train.X,test.X,train.Y,k=7)
knn.pred.k9=knn.reg(train.X,test.X,train.Y,k=9)
knn.pred.k11=knn.reg(train.X,test.X,train.Y,k=11)
knn.pred.k13=knn.reg(train.X,test.X,train.Y,k=13)
knn.pred.k15=knn.reg(train.X,test.X,train.Y,k=15)
knn.pred.k17=knn.reg(train.X,test.X,train.Y,k=17)
knn.pred.k19=knn.reg(train.X,test.X,train.Y,k=19)
knn.pred.k21=knn.reg(train.X,test.X,train.Y,k=21)
knn.pred.k23=knn.reg(train.X,test.X,train.Y,k=23)
knn.pred.k25=knn.reg(train.X,test.X,train.Y,k=25)
knn.pred.k27=knn.reg(train.X,test.X,train.Y,k=27)
knn.pred.k101=knn.reg(train.X,test.X,train.Y,k=101)
mean((knn.pred.k1$pred - test.Y)^2)
mean((knn.pred.k3$pred - test.Y)^2)
mean((knn.pred.k5$pred - test.Y)^2)
mean((knn.pred.k7$pred - test.Y)^2)
mean((knn.pred.k9$pred - test.Y)^2)
mean((knn.pred.k11$pred - test.Y)^2)
mean((knn.pred.k13$pred - test.Y)^2)
mean((knn.pred.k15$pred - test.Y)^2)
mean((knn.pred.k17$pred - test.Y)^2)
mean((knn.pred.k19$pred - test.Y)^2)
mean((knn.pred.k21$pred - test.Y)^2)
mean((knn.pred.k23$pred - test.Y)^2)
mean((knn.pred.k25$pred - test.Y)^2)
mean((knn.pred.k27$pred - test.Y)^2)
mean((knn.pred.k101$pred - test.Y)^2)
knn.pred.k1$pred
knn.pred.k101$pred
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("shiny")
wellPanel("some texts")
library(shiny)
wellPanel("some texts")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- function(input, output){}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/DV/HW1')
shiny::runApp('Desktop/DV/HW1')
shiny::runApp('Desktop/DV/HW1')
library(shiny)
library(tidyverse)
library(shiny)
library(tidyverse)
library(shiny)
install.packages(c("bitops", "boot", "brio", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "desc", "diffobj", "digest", "evaluate", "fansi", "FNN", "foreign", "generics", "ggplot2", "highr", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "magrittr", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "R6", "RColorBrewer", "RCurl", "readr", "rmarkdown", "rpart", "rprojroot", "scales", "spatial", "stringi", "survival", "testthat", "tidyr", "tinytex", "tree", "tzdb", "utf8", "waldo", "withr", "xfun", "yaml"))
install.packages(c("bitops", "boot", "brio", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "desc", "diffobj", "digest", "evaluate", "fansi", "FNN", "foreign", "generics", "ggplot2", "highr", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "magrittr", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "R6", "RColorBrewer", "RCurl", "readr", "rmarkdown", "rpart", "rprojroot", "scales", "spatial", "stringi", "survival", "testthat", "tidyr", "tinytex", "tree", "tzdb", "utf8", "waldo", "withr", "xfun", "yaml"))
install.packages(c("bitops", "boot", "brio", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "desc", "diffobj", "digest", "evaluate", "fansi", "FNN", "foreign", "generics", "ggplot2", "highr", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "magrittr", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "R6", "RColorBrewer", "RCurl", "readr", "rmarkdown", "rpart", "rprojroot", "scales", "spatial", "stringi", "survival", "testthat", "tidyr", "tinytex", "tree", "tzdb", "utf8", "waldo", "withr", "xfun", "yaml"))
install.packages(c("bitops", "boot", "brio", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "desc", "diffobj", "digest", "evaluate", "fansi", "FNN", "foreign", "generics", "ggplot2", "highr", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "magrittr", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "R6", "RColorBrewer", "RCurl", "readr", "rmarkdown", "rpart", "rprojroot", "scales", "spatial", "stringi", "survival", "testthat", "tidyr", "tinytex", "tree", "tzdb", "utf8", "waldo", "withr", "xfun", "yaml"))
shiny::runApp('Desktop/DV/HW1')
require(installr) updateR()
shiny::runApp('Desktop/DV/HW1')
runApp('Desktop/DV/HW1')
runApp('Desktop/DV/HW1')
library(tidyverse)
runApp('Desktop/DV/HW1')
library(shiny)
library(tidyverse)
runApp('Desktop/DV/HW1')
runApp('Desktop/DV/HW1')
shiny::runApp('Desktop/DV/HW1')
runApp('Downloads')
#slide 3
View(mpg)
library(tidyverse)
#slide 3
View(mpg)
#slide 5
summarise(mpg, avgCity = mean(cty), minHwy = min(hwy))
# slide 7
mpg
group_by(mpg, class)
group_by(mpg, class)
summarise_all(mpg)
summarise_all(mpg)
summarise_all()
library(tidyverse)
#slide 3
View(mpg)
summarise_all(mpg)
summarise(mpg)
n(mpg)
summarise(mpg, count=n(), uniq_cnt=n_distinct(class))
#slide 3
View(mpg)
summarise(mpg, count=n(), uniq_cnt=n_distinct(class), sum(!is.na(cty)))
summarise(mpg, count=n(), uniq_cnt=n_distinct(class), num_of_val=sum(!is.na(cty)))
summarise(mpg, count=n(), uniq_cnt=n_distinct(class), num_of_val=sum(!is.na(cty)
a = first(cty)))
a = first(cty))
summarise(mpg, count=n(), uniq_cnt=n_distinct(class), num_of_val=sum(!is.na(cty),
a = first(cty)))
summarise(mpg, count=n(), uniq_cnt=n_distinct(class), num_of_val=sum(!is.na(cty),
a = first(cty)))
# slide 10
mpg %>%
group_by(class) %>%
summarise(avgCity = mean(cty), ObsCount = n())
# slide 10
mpg %>%
group_by(class) %>%
summarise(ObsCount = n())
# slide 7
mpg
mpg %>%
distinct(manufacturer, model)
# slide 18
mpg %>%
arrange(desc(cty))
# slide 19
mpg %>%
arrange(year, desc(cty))
# slide 21
mpg %>%
group_by(class) %>%
arrange(desc(cty)) %>%
slice(1:3)
mpg %>%
group_by(class)
# slide 21
mpg %>%
group_by(class) %>%
arrange(desc(cty)) %>%
slice(1:3)
mpg %>%
group_by(class) %>%
arrange(desc(cty)) %>%
slice(1:3)%>%
ungroup()
View(mpg)
mpg %>%
group_by(class)
mpg %>%
group_by(class)%>%
summarise(Count = n())
mpg %>%
group_by(class)%>%
summarise(Count = n())%>%
arrange(desc(count))
mpg %>%
group_by(class)%>%
summarise(Count = n())%>%
arrange(desc(Count))
mpg %>%
mutate(avg_mpg = (cty+hwy)/2)
mpg %>%
mutate(smallCars = class %in% c("compact", "midsize", "2seater", "subcompact"))
mpg%>% (cum_cases = cumsum(cty), lag1 = lag(cty, diff=cty-yesterday))
mpg%>% (cum_cases = cumsum(cty) lag1 = lag(cty, diff=cty-yesterday))
mpg %>%
cum_cases = cumsum(cty), lag1 = lag(cty, diff=cty-yesterday))
mpg%>%
cum_cases = cumsum(cty) lag1 = lag(cty, diff=cty-yesterday)
mpg%>%
cum_cases = cumsum(cty), lag1 = lag(cty, diff=cty-yesterday)
chartSeries(aapl)
aaplRets <- na.omit(dailyReturn(aaplClose, type="log"))
aaplClose <- getSymbols.yahoo("AAPL", from=dt, auto.assign = F)[,6]
library(quantmod)
library(quantmod)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library(quantmod)
library(PerformanceAnalytics)
dt <- "2017-2-1"
aapl <- getSymbols.yahoo("AAPL", from=dt, auto.assign = F)
aaplClose <- getSymbols.yahoo("AAPL", from=dt, auto.assign = F)[,6]
aaplRets <- na.omit(dailyReturn(aaplClose, type="log"))
chartSeries(aapl)
View(aaplRets)
######################### Lab # 3 Solution ##################################
library(data.table)
datadf = readRDS('DATA.rds')
library(BatchGetSymbols)
install.packages("tidyquant")
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
prices <- tq_get(tickers,
from = "2017-01-01",
to = "2017-03-01",
get = "stock.prices")
library(tidyquant)
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
prices <- tq_get(tickers,
from = "2017-01-01",
to = "2017-03-01",
get = "stock.prices")
head(prices)
prices %>%
group_by(symbol) %>%
slice(1)
library(tidyverse)
prices %>%
group_by(symbol) %>%
slice(1)
View(prices)
install.packages(c("DBI", "MASS", "nlme", "processx", "ps", "tinytex"))
library(BatchGetSymbols)
install.packages("BatchGetSymbols")
library(BatchGetSymbols)
library(BatchGetSymbols)
sp500 <- GetSP500Stocks()
sp500$tickers
sp500$tickers
sp500 <- GetSP500Stocks()
View(sp500)
View(sp500)
sp500$Tickers
prices <- tq_get(sp500$Tickers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
library(quantmod)
library(PerformanceAnalytics)
library(tidyquant)
library(tidyverse)
library(BatchGetSymbols)
library(quantmod)
library(PerformanceAnalytics)
library(tidyquant)
library(tidyverse)
library(BatchGetSymbols)
sp500 <- GetSP500Stocks()
sp500$Tickers
prices <- tq_get(sp500$Tickers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
head(prices)
library(quantmod)
library(PerformanceAnalytics)
library(tidyquant)
library(tidyverse)
library(BatchGetSymbols)
sp500 <- GetSP500Stocks()
sp500$Tickers
prices <- tq_get(sp500$Tickers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
head(prices)
sp500$Tickers
sp500$Tickers
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
tkers= sp500$Tickers
class(tickers)
class(tkers)
sp500 <- GetSP500Stocks()
tkers= sp500$Tickers
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
prices <- tq_get(tkers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
prices <- tq_get(tickers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
View(prices)
sp500 <- GetSP500Stocks()
tkers= sp500$Tickers
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
prices <- tq_get(tickers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
prices <- tq_get(tkers,
from = "2000-01-01",
to = "2017-03-01",
get = "stock.prices")
prices <- tq_get(tkers,
from = "2017-02-28",
to = "2017-03-01",
get = "stock.prices")
warnings()
View(prices)
prices <- tq_get(tkers,
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
prices <- tq_get(tkers[1:10],
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
prices <- tq_get(tkers[1],
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
prices <- tq_get(tickers,
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
prices <- tq_get("AAPL",
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
prices <- tq_get("AAPL",
from = "2021-03-01",
to = "2021-03-02",
get = "stock.prices")
library(shiny); runApp('Downloads/final project_dv/app717.R')
setwd("~/Downloads/final project_dv")
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
runApp('app717.R')
library(shiny); runApp('app721.R')
runApp('~/Desktop/final project_dv 2/app717.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
runApp('app721.R')
library(shiny); runApp('app721.R')
library(shiny); runApp('app721.R')
